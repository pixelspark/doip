import os, shutil, sys
env = Environment();

# Base the debian version number partly on the
# revision checked out from our SVN repository. 
svn_version = os.popen('svnversion ..').read()[:-1]

# This may be as simple as '89' or as complex as '4123:4184M'.
# We'll just use the last bit.
svn_version = svn_version.split(':')[-1]

# Here's the core info for the package
DEBNAME = "tjbluetoothepserver"
DEBVERSION = "1.0"
DEBMAINT = "Tommy van der Vorst [tommy@tjshow.com]"
DEBARCH = "armel"
DEBDEPENDS = "" # "other-package1, otherpackage2"
DEBDESC = "TJShow EP daemon for Bluetooth"

DEBFILES = [
    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ("etc/init.d/tjtoothepd",								"init.d/tjtoothepd"),
    ("usr/share/tjbluetoothepserver/tjtoothepd",            "../../build/tjtoothepd"),
    ("usr/share/tjbluetoothepserver/libtjshared.so",		"../../build/libtjshared.so"),
    ("usr/share/tjbluetoothepserver/libtjscout.so",			"../../build/libtjscout.so"),
    ("usr/share/tjbluetoothepserver/libtjnp.so",			"../../build/libtjnp.so"),
    ("usr/share/tjbluetoothepserver/libtjscript.so",		"../../build/libtjscript.so"),
    ("usr/share/tjbluetoothepserver/libepframework.so",		"../../build/libepframework.so"),
    ("usr/share/tjbluetoothepserver/libtinyxml.so",			"../../build/libtinyxml.so"),
    ("usr/sharetjbluetoothepservertj/liboscpack.so",		"../../build/liboscpack.so"),
]
    
# This is the debian package we're going to create
debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, svn_version, DEBARCH)

DEBCONTROLFILE = os.path.join(DEBNAME, "DEBIAN/control")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s-%s
Depends: %s
Description: %s

"""

env.Depends(debpkg,DEBCONTROLFILE )

# The control file should be updated when the SVN version changes
env.Depends(DEBCONTROLFILE, env.Value(svn_version))

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
        svn_version, DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()
    
# We can generate the control file by calling make_control
env.Command(DEBCONTROLFILE, None, make_control)

# Copy conffiles file
DEBCONFFILES = os.path.join(DEBNAME, "DEBIAN/conffiles")
env.Command(DEBCONFFILES, "conffiles/tjbluetoothepserver", Copy('$TARGET','$SOURCE'))
env.Depends(debpkg, DEBCONFFILES)

# Copy XML configuration file
DEBCONFXML = os.path.join(DEBNAME, "etc/tj/toothepd/global.xml");
env.Command(DEBCONFXML, "conf/tjbluetoothepserver/global.xml", Copy('$TARGET','$SOURCE'))
env.Depends(debpkg, DEBCONFXML)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE, "chmod -s %s" % (DEBCONTROLFILE))
env.Command(debpkg, DEBCONTROLFILE, "fakeroot dpkg-deb -b %s ../../build/%s" % ("%s" % DEBNAME, "$TARGET"))
